version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: upc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: upc_resolver
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - upc_network

  # Redis for Bull Queue and Caching
  redis:
    image: redis:7-alpine
    container_name: upc_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - upc_network

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: upc_minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - upc_network

  # Backend API Server
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: upc_api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: postgresql://postgres:password123@postgres:5432/upc_resolver?schema=public
      REDIS_URL: redis://redis:6379
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: upc-resolver-files
      AWS_ENDPOINT: http://minio:9000
      NODE_ENV: development
      PORT: 5000
    depends_on:
      - postgres
      - redis
      - minio
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - upc_network
    command: npm run dev

  # Frontend Next.js Application
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: upc_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: development-secret-key
    depends_on:
      - api
    volumes:
      - ./client:/app
      - /app/node_modules
      - /app/.next
    networks:
      - upc_network
    command: npm run dev

  # Background Job Worker
  worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: upc_worker
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:password123@postgres:5432/upc_resolver?schema=public
      REDIS_URL: redis://redis:6379
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: upc-resolver-files
      AWS_ENDPOINT: http://minio:9000
      NODE_ENV: development
      WORKER_MODE: true
    depends_on:
      - postgres
      - redis
      - minio
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - upc_network
    command: npm run worker

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  upc_network:
    driver: bridge

# Development helpers
x-common-variables: &common-variables
  NODE_ENV: development
  DEBUG: "upc:*"